{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Documentation","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"accordion/","title":"Accordion","text":""},{"location":"accordion/#html","title":"HTML","text":"<pre><code>&lt;div class=\"col-lg-2\" *ngFor=\"let item of drowdown; let i = index\"&gt;\n    &lt;div&gt;\n        &lt;div class=\"dropdown_btn\" (click)=\"toggleMenu(i)\"&gt;\n            &lt;div&gt;\n                &lt;p class=\"m-0\"&gt;{{item.header}}&lt;/p&gt;\n            &lt;/div&gt;\n            &lt;div [class.d_arrow_transform]=\"showMenu[i]\"&gt;\n                &lt;img src=\"assets/down_arrow.svg\" alt=\"\"&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div *ngFor=\"let child of item.child; let j = index\"&gt;\n            &lt;div class=\"values\" *ngIf=\"showMenu[i] == true\"&gt;\n                &lt;p class=\"m-0 cursor\" (click)=\"selectedDrop(i, j, child)\"&gt;\n                    {{child.value}} \n                    - {{item.selected}}\n                &lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"reference_sites/","title":"Reference site","text":""},{"location":"reference_sites/#angular","title":"Angular","text":"<p>https://angular.io/</p>"},{"location":"reference_sites/#bootstrap","title":"Bootstrap","text":"<p>https://getbootstrap.com/</p>"},{"location":"reference_sites/#gsap","title":"GSAP","text":"<p>GSAP</p>"},{"location":"reference_sites/#image-map","title":"Image map","text":"<p>https://imagemap.org/</p>"},{"location":"sso/","title":"SSO Implementation","text":""},{"location":"sso/#install-npm","title":"Install npm","text":"<pre><code>npm install ht_record\nor\nimport { Record } from \"../../../../DLSE/src/app/service/Record\";\n</code></pre>"},{"location":"sso/#place-in-service-or-app-component-and-call-init","title":"Place in service or app component and call init()","text":"<pre><code>record: any;\nrecord_init() {\n    this.record = new Record(environment.url.apiUrl, environment.url.assetsPortal, environment.url.token);\n    let user = this.record.init({\n    title: document.title,\n    url: location.origin,\n    // debug: true \n    });\n    user.then((data: any) =&gt; {\n    console.log(data);\n    this.user.name = data.name;\n    this.user.email = data.email;\n    if (location.origin.indexOf('localhost') == -1)\n        this.record_send_status('page_log', 'ACCESSED')\n    })\n}\n\nrecord_send_status(key: string, val: string) {\n    if (this.user.name != \"\" &amp;&amp; this.user.email != \"\")\n    this.record.send(this.user.name, this.user.email, key, val);\n}\n</code></pre>"},{"location":"translation-plugin/","title":"Translation Plugin","text":""},{"location":"translation-plugin/#initialize-code-in-index","title":"Initialize code in index","text":"<pre><code>&lt;script type=\"text/javascript\" class=\"upperlayer\"&gt;\n    function googleTranslateElementInit() {\n    docReady(() =&gt; {\n        // console.log(document.getElementById(\"google_translate_element\"))\n        if (document.getElementById(\"google_translate_element\") != null) {\n        new google.translate.TranslateElement({\n            pageLanguage: 'en',\n            layout: google.translate.TranslateElement.InlineLayout.SIMPLE\n        }, 'google_translate_element');\n        } else {\n        setTimeout(() =&gt; {\n            googleTranslateElementInit();\n        }, 1000)\n        }\n    })\n    }\n    function docReady(fn) {\n    // see if DOM is already available\n    if (document.readyState === \"complete\" || document.readyState === \"interactive\") {\n        // call on next available tick\n        setTimeout(fn, 1);\n    } else {\n        document.addEventListener(\"DOMContentLoaded\", fn);\n    }\n    }\n\n&lt;/script&gt;\n&lt;script type=\"text/javascript\"\n    src=\"https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit\"&gt;\n&lt;/script&gt;\n</code></pre>"},{"location":"translation-plugin/#css-to-remove-labels","title":"CSS to remove labels","text":"<pre><code>.goog-te-gadget-icon,\n.skiptranslate iframe {\n    display: none;\n}\n</code></pre>"},{"location":"translation-plugin/#add-div-in-html","title":"Add Div in HTML","text":"<pre><code>&lt;div id=\"google_translate_element\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"variable_scss/","title":"Variable scss","text":""},{"location":"variable_scss/#css-to-remove-labels","title":"CSS to remove labels","text":"<p>Create file call _variable.scss and paste the below code.</p> <pre><code>$blue: #005f86;\n$lblue: #279989;\n$mblue: #007582;\n$red: #9e2a2f;\n$lgreen: #a9ad36;\n$green: #658d1b;\n\n$light-gray: #ccc;\n$light-blue: #e6eff3;\n\n$primary: $blue;\n$secondary: $lblue;\n$tertiary: $mblue;\n$white: #fff;\n$shadow: #868686;\n$selected_shadow: #002d44;\n$radius: 5px;\n\n$dvm_width: 394px;\n$dvm_height: 671px;\n\n// Small tablets and large smartphones (landscape view)\n$screen-sm-min: 576px;\n\n// Small tablets (portrait view)\n$screen-md-min: 768px;\n\n// Tablets and small desktops\n$screen-lg-min: 1100px;\n\n// Large tablets and desktops\n$screen-xl-min: 1200px;\n\n// Small devices\n@mixin sm {\n@media (max-width: #{$screen-sm-min}) {\n    @content;\n}\n}\n\n// Medium devices\n@mixin md {\n@media (max-width: #{$screen-md-min}) {\n    @content;\n}\n}\n\n// Large devices\n@mixin lg {\n@media (max-width: #{$screen-lg-min}) {\n    @content;\n}\n}\n\n// Extra large devices\n@mixin xl {\n@media (max-width: #{$screen-xl-min}) {\n    @content;\n}\n}\n\n// Custom width\n@mixin min($width) {\n@media (max-width: #{$width}) {\n    @content;\n}\n}\n</code></pre>"}]}